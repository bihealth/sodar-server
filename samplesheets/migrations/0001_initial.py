# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-04-11 15:58
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projectroles', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('file_name', models.CharField(help_text='File name for exporting', max_length=255)),
                ('technology_platform', models.CharField(blank=True, help_text='Technology platform (optional)', max_length=255, null=True)),
                ('technology_type', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Technology type')),
                ('measurement_type', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Measurement type')),
                ('characteristic_cat', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Characteristic categories')),
                ('unit_cat', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Unit categories')),
                ('arcs', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), size=None), default=list, help_text='Assay arcs', size=None)),
                ('header', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Column headers')),
            ],
        ),
        migrations.CreateModel(
            name='GenericMaterial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('item_type', models.CharField(choices=[('SOURCE', 'Source'), ('MATERIAL', 'Material'), ('SAMPLE', 'Sample'), ('DATA', 'Data File')], default='MATERIAL', max_length=255)),
                ('name', models.CharField(help_text='Material name', max_length=255)),
                ('unique_name', models.CharField(blank=True, help_text='Unique material name', max_length=255, null=True)),
                ('characteristics', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Material characteristics')),
                ('material_type', models.CharField(blank=True, help_text='Material or data file type', max_length=255, null=True)),
                ('factor_values', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Factor values for a sample', null=True)),
                ('extract_label', models.CharField(blank=True, help_text='Extract label', max_length=255, null=True)),
                ('assay', models.ForeignKey(help_text='Assay to which the material belongs (for assay sequence)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='samplesheets.Assay')),
            ],
            options={
                'verbose_name': 'material',
                'verbose_name_plural': 'materials',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Investigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('identifier', models.CharField(help_text='Locally unique identifier', max_length=255)),
                ('file_name', models.CharField(help_text='File name for exporting', max_length=255)),
                ('title', models.CharField(blank=True, help_text='Title (optional, can be derived from project)', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Investigation description (optional, can be derived from project)', null=True)),
                ('ontology_source_refs', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Ontology source references')),
                ('project', models.ForeignKey(help_text='Project to which the investigation belongs', on_delete=django.db.models.deletion.CASCADE, related_name='investigations', to='projectroles.Project')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('name', models.CharField(blank=True, help_text='Process name (optional)', max_length=255, null=True)),
                ('unique_name', models.CharField(blank=True, help_text='Unique process name', max_length=255, null=True)),
                ('parameter_values', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Process parameter values')),
                ('performer', models.CharField(blank=True, help_text='Process performer (optional)', max_length=255, null=True)),
                ('perform_date', models.DateField(help_text='Process performing date (optional)', null=True)),
                ('array_design_ref', models.CharField(blank=True, help_text='Array design ref', max_length=255, null=True)),
                ('scan_name', models.CharField(blank=True, help_text='Scan name for special cases in ISAtab', max_length=255, null=True)),
                ('assay', models.ForeignKey(help_text='Assay to which the process belongs (for assay sequence)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processes', to='samplesheets.Assay')),
            ],
            options={
                'verbose_name_plural': 'processes',
            },
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('name', models.CharField(help_text='Protocol name', max_length=255)),
                ('protocol_type', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Protocol type', null=True)),
                ('description', models.TextField(blank=True, help_text='Protocol description')),
                ('uri', models.CharField(help_text='Protocol URI', max_length=2048)),
                ('version', models.CharField(help_text='Protocol version', max_length=255)),
                ('parameters', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Protocol parameters')),
                ('components', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Protocol components')),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('omics_uuid', models.UUIDField(default=uuid.uuid4, help_text='Internal UUID for the object', unique=True)),
                ('sharing_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Data sharing rules')),
                ('retraction_data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Consent retraction data')),
                ('comments', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Comments')),
                ('identifier', models.CharField(help_text='Locally unique identifier', max_length=255)),
                ('file_name', models.CharField(help_text='File name for exporting', max_length=255)),
                ('title', models.CharField(blank=True, help_text='Title of the study (optional)', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Study description (optional)')),
                ('study_design', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Study design descriptors')),
                ('factors', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Study factors')),
                ('characteristic_cat', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Characteristic categories')),
                ('unit_cat', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Unit categories')),
                ('arcs', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), size=None), default=list, help_text='Study arcs', size=None)),
                ('header', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Column headers')),
                ('investigation', models.ForeignKey(help_text='Investigation to which the study belongs', on_delete=django.db.models.deletion.CASCADE, related_name='studies', to='samplesheets.Investigation')),
            ],
            options={
                'verbose_name_plural': 'studies',
                'ordering': ['identifier'],
            },
        ),
        migrations.AddField(
            model_name='protocol',
            name='study',
            field=models.ForeignKey(help_text='Study to which the protocol belongs', on_delete=django.db.models.deletion.CASCADE, related_name='protocols', to='samplesheets.Study'),
        ),
        migrations.AddField(
            model_name='process',
            name='protocol',
            field=models.ForeignKey(blank=True, help_text='Protocol which the process executes', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processes', to='samplesheets.Protocol'),
        ),
        migrations.AddField(
            model_name='process',
            name='study',
            field=models.ForeignKey(help_text='Study to which the process belongs (for study sequence)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processes', to='samplesheets.Study'),
        ),
        migrations.AddField(
            model_name='genericmaterial',
            name='study',
            field=models.ForeignKey(help_text='Study to which the material belongs (for study sequence)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='samplesheets.Study'),
        ),
        migrations.AddField(
            model_name='assay',
            name='study',
            field=models.ForeignKey(help_text='Study to which the assay belongs', on_delete=django.db.models.deletion.CASCADE, related_name='assays', to='samplesheets.Study'),
        ),
        migrations.AlterUniqueTogether(
            name='study',
            unique_together=set([('investigation', 'identifier', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='protocol',
            unique_together=set([('study', 'name')]),
        ),
        migrations.AddIndex(
            model_name='process',
            index=models.Index(fields=['unique_name'], name='samplesheet_unique__a529d5_idx'),
        ),
        migrations.AddIndex(
            model_name='process',
            index=models.Index(fields=['study'], name='samplesheet_study_i_ca59b5_idx'),
        ),
        migrations.AddIndex(
            model_name='genericmaterial',
            index=models.Index(fields=['unique_name'], name='samplesheet_unique__b757a5_idx'),
        ),
        migrations.AddIndex(
            model_name='genericmaterial',
            index=models.Index(fields=['study'], name='samplesheet_study_i_cc3e33_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='assay',
            unique_together=set([('study', 'file_name')]),
        ),
    ]
